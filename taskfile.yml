version: '3'

env:
  CONFIG_PATH: '{{.PWD}}/config'
  BREWFILE_PATH: '{{.CONFIG_PATH}}/brew/Brewfile'

dotenv: ['.env', '{{.ENV}}/.env.', '{{.HOME}}/.env']

tasks:
  default:
    desc: List tasks (default)
    cmds:
      - cmd: task -l
        silent: true

  brew:install:
    desc: Installs brew (https://brew.sh/)
    cmds:
      - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  brew:freeze:
    desc: Creates/overwrites a brewfile based on current brew config (like pip freeze)
    cmds:
      - brew bundle dump --force --file='{{.BREWFILE_PATH}}'

  brew:bundle:check:
    desc: Installs everything specified in a Brewfile and uninstall what's installed but not listed in the file
    cmds:
      - brew bundle check --file='{{.BREWFILE_PATH}}'

  brew:bundle:install:
    desc: Installs everything specified in a Brewfile
    cmds:
      - brew bundle install --file='{{.BREWFILE_PATH}}'

  brew:bundle:cleanup:
    desc: Uninstall all dependencies not listed from the Brewfile.
    cmds:
      - brew bundle cleanup --force --file='{{.BREWFILE_PATH}}'

  borders:start:
    desc:
    cmds:
      - borders/bordersrc

  yabai:install:
    desc: Installs yabai
    cmds:
      - brew install koekeishiya/formulae/yabai

  yabai:upgrade:
    desc: Upgrades yabai
    cmds:
      - brew upgrade yabai

  yabai:start:
    desc: Starts the yabai service
    cmds:
      - yabai --start-service
      - task: borders:start

  yabai:stop:
    desc: Stops the yabai service
    cmds:
      - yabai --stop-service

  yabai:restart:
    desc: Restarts the yabai service
    cmds:
      - yabai --restart-service
      - task: borders:start

  yabai:configure-scripting-addition:
    desc: |
      Configure scripting addition, as per https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)#configure-scripting-addition

      This is only required for some features to work.
      We don't use them, or this.
    cmds:
      - echo {{.USER}} {{.HASH}} {{.YABAI}}
      - sudo touch {{.TARGET_FILE}}
      - echo "{{.CONTENT_LINE}}"
      # If this doesn't work, edit file manually e.g. sudo micro /private/etc/sudoers.d/yabai
      - sudo echo "{{.CONTENT_LINE}}" > {{.TARGET_FILE}}
      - |
        yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
      - sudo yabai --load-sa
    vars:
      TARGET_FILE: /private/etc/sudoers.d/yabai
      USER:
        sh: whoami
      YABAI:
        sh: which yabai
      HASH:
        sh: shasum -a 256 {{.YABAI}}
      CONTENT_LINE: "{{.USER}} ALL=(root) NOPASSWD: sha256:{{.HASH}} {{.YABAI}} --load-sa"

  skhd:start:
    desc: Starts the skhd service
    cmds:
      - skhd --start-service

  skhd:stop:
    desc: Stops the skhd service
    cmds:
      - skhd --stop-service

  skhd:restart:
    desc: Restarts the skhd service
    cmds:
      - task: skhd:stop
      - task: skhd:start

  stow:stow:
    desc: Stows the dotfiles in the local home dir
    cmds:
      - for:
          - nano
          - yabai
          - borders
          - skhd
        cmd: stow {{.CLI_ARGS}} --dir={{.CONFIG_PATH}} --target=$HOME {{ .ITEM }}

  stow:simulate:
    desc: Simulates the stowing of dotfiles in the local home dir (no harm done)
    cmds:
      - task: stow:stow
        vars: { CLI_ARGS: '-nSv' }

  stow:unstow:
    desc: Unstows the dotfiles in the local home dir
    cmds:
      - task: stow:stow
        vars: { CLI_ARGS: '-D' }

  aichat:
    desc: |
      runs aichat
      config location: /Users/.../Library/Application Support/aichat/*.yaml
      more info: https://github.com/sigoden/aichat?tab=readme-ov-file#command
    cmds:
      - aichat {{.CLI_ARGS}}
